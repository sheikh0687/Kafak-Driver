//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Dark Blue`.
    static let darkBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dark Blue")
    /// Color `Light Blue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Light Blue")
    /// Color `Sub Blue`.
    static let subBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Sub Blue")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dark Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Light Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Sub Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func subBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.subBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Dark Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Light Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Sub Blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func subBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.subBlue.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `cairo_bold.ttf`.
    static let cairo_boldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "cairo_bold", pathExtension: "ttf")
    /// Resource file `cairo_light.ttf`.
    static let cairo_lightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "cairo_light", pathExtension: "ttf")
    /// Resource file `cairo_regular.ttf`.
    static let cairo_regularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "cairo_regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cairo_bold", withExtension: "ttf")`
    static func cairo_boldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairo_boldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cairo_light", withExtension: "ttf")`
    static func cairo_lightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairo_lightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cairo_regular", withExtension: "ttf")`
    static func cairo_regularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairo_regularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Cairo-Bold`.
    static let cairoBold = Rswift.FontResource(fontName: "Cairo-Bold")
    /// Font `Cairo-Light`.
    static let cairoLight = Rswift.FontResource(fontName: "Cairo-Light")
    /// Font `Cairo-Regular`.
    static let cairoRegular = Rswift.FontResource(fontName: "Cairo-Regular")

    /// `UIFont(name: "Cairo-Bold", size: ...)`
    static func cairoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBold, size: size)
    }

    /// `UIFont(name: "Cairo-Light", size: ...)`
    static func cairoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoLight, size: size)
    }

    /// `UIFont(name: "Cairo-Regular", size: ...)`
    static func cairoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoRegular, size: size)
    }

    static func validate() throws {
      if R.font.cairoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Bold' could not be loaded, is 'cairo_bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Light' could not be loaded, is 'cairo_light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Regular' could not be loaded, is 'cairo_regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 183 images.
  struct image {
    /// Image `Home24`.
    static let home24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home24")
    /// Image `KafakIcon`.
    static let kafakIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "KafakIcon")
    /// Image `Loader`.
    static let loader = Rswift.ImageResource(bundle: R.hostingBundle, name: "Loader")
    /// Image `No_Image_Available 1`.
    static let no_Image_Available1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "No_Image_Available 1")
    /// Image `No_Image_Available`.
    static let no_Image_Available = Rswift.ImageResource(bundle: R.hostingBundle, name: "No_Image_Available")
    /// Image `Notify24`.
    static let notify24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notify24")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Review Products`.
    static let reviewProducts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Review Products")
    /// Image `Right-Back`.
    static let rightBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "Right-Back")
    /// Image `Setting24`.
    static let setting24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Setting24")
    /// Image `TransWallet18`.
    static let transWallet18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet18")
    /// Image `TransWallet`.
    static let transWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet")
    /// Image `aboutimg`.
    static let aboutimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutimg")
    /// Image `addimage`.
    static let addimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "addimage")
    /// Image `addratingmoney_ic`.
    static let addratingmoney_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "addratingmoney_ic")
    /// Image `arrow_green_up`.
    static let arrow_green_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_green_up")
    /// Image `arrow_red_down`.
    static let arrow_red_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_red_down")
    /// Image `attachnew`.
    static let attachnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachnew")
    /// Image `back 1`.
    static let back1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back 1")
    /// Image `back Old`.
    static let backOld = Rswift.ImageResource(bundle: R.hostingBundle, name: "back Old")
    /// Image `banner1`.
    static let banner1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner1")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `black_profile`.
    static let black_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_profile")
    /// Image `brick`.
    static let brick = Rswift.ImageResource(bundle: R.hostingBundle, name: "brick")
    /// Image `calender`.
    static let calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "calender")
    /// Image `calendericon`.
    static let calendericon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendericon")
    /// Image `calenderimg`.
    static let calenderimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "calenderimg")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `carticon`.
    static let carticon = Rswift.ImageResource(bundle: R.hostingBundle, name: "carticon")
    /// Image `cashondelivery`.
    static let cashondelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "cashondelivery")
    /// Image `cat1`.
    static let cat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat1")
    /// Image `cat2`.
    static let cat2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat2")
    /// Image `cat3`.
    static let cat3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat3")
    /// Image `cat4`.
    static let cat4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat4")
    /// Image `cat5`.
    static let cat5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat5")
    /// Image `cat6`.
    static let cat6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat6")
    /// Image `changelangicon`.
    static let changelangicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "changelangicon")
    /// Image `chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat")
    /// Image `chatnew12`.
    static let chatnew12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatnew12")
    /// Image `check_new_selected`.
    static let check_new_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_new_selected")
    /// Image `check_new_unselected`.
    static let check_new_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_new_unselected")
    /// Image `checked_white`.
    static let checked_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "checked_white")
    /// Image `circle_back`.
    static let circle_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_back")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `cotwoavoid_ic`.
    static let cotwoavoid_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "cotwoavoid_ic")
    /// Image `debitcard`.
    static let debitcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "debitcard")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `discount_food_big_img`.
    static let discount_food_big_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "discount_food_big_img")
    /// Image `discountimg2`.
    static let discountimg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "discountimg2")
    /// Image `downarow`.
    static let downarow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarow")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `editpronew`.
    static let editpronew = Rswift.ImageResource(bundle: R.hostingBundle, name: "editpronew")
    /// Image `empty_cart`.
    static let empty_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_cart")
    /// Image `empty_notification`.
    static let empty_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_notification")
    /// Image `empty_transaction`.
    static let empty_transaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_transaction")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `fav_active`.
    static let fav_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_active")
    /// Image `fav_deactive`.
    static let fav_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_deactive")
    /// Image `fav_selected`.
    static let fav_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_selected")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `food_details`.
    static let food_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "food_details")
    /// Image `foodimg`.
    static let foodimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "foodimg")
    /// Image `forward_ic`.
    static let forward_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "forward_ic")
    /// Image `googleplus`.
    static let googleplus = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleplus")
    /// Image `grey_call`.
    static let grey_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_call")
    /// Image `grey_icon`.
    static let grey_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_icon")
    /// Image `grey_round_edge_back`.
    static let grey_round_edge_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "grey_round_edge_back")
    /// Image `greyblackback`.
    static let greyblackback = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyblackback")
    /// Image `greyclock`.
    static let greyclock = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyclock")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `helpnew`.
    static let helpnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpnew")
    /// Image `historynew`.
    static let historynew = Rswift.ImageResource(bundle: R.hostingBundle, name: "historynew")
    /// Image `home_active`.
    static let home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_active")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `horizontal_menu`.
    static let horizontal_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal_menu")
    /// Image `humbleicons_chat`.
    static let humbleicons_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "humbleicons_chat")
    /// Image `ic_CheckedCircle_Black`.
    static let ic_CheckedCircle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CheckedCircle_Black")
    /// Image `ic_Circle_Black`.
    static let ic_Circle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Circle_Black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_pin1`.
    static let ic_pin1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin1")
    /// Image `ic_pin2`.
    static let ic_pin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin2")
    /// Image `invitefriend_big_ic`.
    static let invitefriend_big_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend_big_ic")
    /// Image `invitefriend`.
    static let invitefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "invitefriend")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `location_grey`.
    static let location_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_grey")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logobackgrey`.
    static let logobackgrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "logobackgrey")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `logoutnew`.
    static let logoutnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoutnew")
    /// Image `macdonladicon`.
    static let macdonladicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "macdonladicon")
    /// Image `magic_bag2`.
    static let magic_bag2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag2")
    /// Image `magic_bag_big_image`.
    static let magic_bag_big_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "magic_bag_big_image")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `mapi`.
    static let mapi = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapi")
    /// Image `mapimg`.
    static let mapimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapimg")
    /// Image `mastercard`.
    static let mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "mastercard")
    /// Image `material-symbols_add-call`.
    static let materialSymbols_addCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "material-symbols_add-call")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `minusnew`.
    static let minusnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "minusnew")
    /// Image `mobilei`.
    static let mobilei = Rswift.ImageResource(bundle: R.hostingBundle, name: "mobilei")
    /// Image `money_saved`.
    static let money_saved = Rswift.ImageResource(bundle: R.hostingBundle, name: "money_saved")
    /// Image `moneysaved_ic`.
    static let moneysaved_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "moneysaved_ic")
    /// Image `mycart`.
    static let mycart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mycart")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `notification_deactive`.
    static let notification_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_deactive")
    /// Image `notiimage`.
    static let notiimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "notiimage")
    /// Image `order_active`.
    static let order_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_active")
    /// Image `order_deactive`.
    static let order_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_deactive")
    /// Image `pass`.
    static let pass = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `paymentsuccess`.
    static let paymentsuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentsuccess")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `pinone`.
    static let pinone = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinone")
    /// Image `pinthree`.
    static let pinthree = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinthree")
    /// Image `pintwo`.
    static let pintwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "pintwo")
    /// Image `pipeshop`.
    static let pipeshop = Rswift.ImageResource(bundle: R.hostingBundle, name: "pipeshop")
    /// Image `plus_grey`.
    static let plus_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_grey")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `plusnew`.
    static let plusnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusnew")
    /// Image `privacy`.
    static let privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `ratingbackground`.
    static let ratingbackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "ratingbackground")
    /// Image `rest_image2`.
    static let rest_image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image2")
    /// Image `rest_image`.
    static let rest_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "rest_image")
    /// Image `reviewicon1`.
    static let reviewicon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "reviewicon1")
    /// Image `riversand1`.
    static let riversand1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "riversand1")
    /// Image `riversand2`.
    static let riversand2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "riversand2")
    /// Image `sand1`.
    static let sand1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sand1")
    /// Image `sand2`.
    static let sand2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sand2")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchfilm`.
    static let searchfilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchfilm")
    /// Image `sendbtnbg`.
    static let sendbtnbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendbtnbg")
    /// Image `sendbtnnew`.
    static let sendbtnnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendbtnnew")
    /// Image `sendnew`.
    static let sendnew = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendnew")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sharenew`.
    static let sharenew = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharenew")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `spidrop`.
    static let spidrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "spidrop")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `splashbg`.
    static let splashbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashbg")
    /// Image `star1`.
    static let star1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star1")
    /// Image `storefilm`.
    static let storefilm = Rswift.ImageResource(bundle: R.hostingBundle, name: "storefilm")
    /// Image `stripe`.
    static let stripe = Rswift.ImageResource(bundle: R.hostingBundle, name: "stripe")
    /// Image `success_order_img`.
    static let success_order_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "success_order_img")
    /// Image `termsofservice`.
    static let termsofservice = Rswift.ImageResource(bundle: R.hostingBundle, name: "termsofservice")
    /// Image `topup`.
    static let topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "topup")
    /// Image `topupsuccess_ic`.
    static let topupsuccess_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "topupsuccess_ic")
    /// Image `transpng`.
    static let transpng = Rswift.ImageResource(bundle: R.hostingBundle, name: "transpng")
    /// Image `truck1`.
    static let truck1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck1")
    /// Image `truck2`.
    static let truck2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck2")
    /// Image `truck3`.
    static let truck3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "truck3")
    /// Image `unchecked_white`.
    static let unchecked_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked_white")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `uploadimg_new`.
    static let uploadimg_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploadimg_new")
    /// Image `userdemoimg`.
    static let userdemoimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "userdemoimg")
    /// Image `useri`.
    static let useri = Rswift.ImageResource(bundle: R.hostingBundle, name: "useri")
    /// Image `view_eye`.
    static let view_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "view_eye")
    /// Image `view`.
    static let view = Rswift.ImageResource(bundle: R.hostingBundle, name: "view")
    /// Image `visa`.
    static let visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "visa")
    /// Image `waitingicon`.
    static let waitingicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "waitingicon")
    /// Image `wallet_back`.
    static let wallet_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_back")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")
    /// Image `walleticon1`.
    static let walleticon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walleticon1")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `watertruck`.
    static let watertruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "watertruck")
    /// Image `welcomeb`.
    static let welcomeb = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomeb")
    /// Image `welcomebg`.
    static let welcomebg = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomebg")
    /// Image `whitecart`.
    static let whitecart = Rswift.ImageResource(bundle: R.hostingBundle, name: "whitecart")
    /// Image `writetous_ic`.
    static let writetous_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous_ic")
    /// Image `writetous`.
    static let writetous = Rswift.ImageResource(bundle: R.hostingBundle, name: "writetous")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home24", bundle: ..., traitCollection: ...)`
    static func home24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "KafakIcon", bundle: ..., traitCollection: ...)`
    static func kafakIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kafakIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Loader", bundle: ..., traitCollection: ...)`
    static func loader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loader, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "No_Image_Available 1", bundle: ..., traitCollection: ...)`
    static func no_Image_Available1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_Image_Available1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "No_Image_Available", bundle: ..., traitCollection: ...)`
    static func no_Image_Available(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_Image_Available, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notify24", bundle: ..., traitCollection: ...)`
    static func notify24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notify24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Review Products", bundle: ..., traitCollection: ...)`
    static func reviewProducts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewProducts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Right-Back", bundle: ..., traitCollection: ...)`
    static func rightBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Setting24", bundle: ..., traitCollection: ...)`
    static func setting24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet", bundle: ..., traitCollection: ...)`
    static func transWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet18", bundle: ..., traitCollection: ...)`
    static func transWallet18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "aboutimg", bundle: ..., traitCollection: ...)`
    static func aboutimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addimage", bundle: ..., traitCollection: ...)`
    static func addimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addratingmoney_ic", bundle: ..., traitCollection: ...)`
    static func addratingmoney_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addratingmoney_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_green_up", bundle: ..., traitCollection: ...)`
    static func arrow_green_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_green_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_red_down", bundle: ..., traitCollection: ...)`
    static func arrow_red_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_red_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "attachnew", bundle: ..., traitCollection: ...)`
    static func attachnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back 1", bundle: ..., traitCollection: ...)`
    static func back1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back Old", bundle: ..., traitCollection: ...)`
    static func backOld(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backOld, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner1", bundle: ..., traitCollection: ...)`
    static func banner1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_profile", bundle: ..., traitCollection: ...)`
    static func black_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brick", bundle: ..., traitCollection: ...)`
    static func brick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calender", bundle: ..., traitCollection: ...)`
    static func calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendericon", bundle: ..., traitCollection: ...)`
    static func calendericon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendericon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calenderimg", bundle: ..., traitCollection: ...)`
    static func calenderimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calenderimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carticon", bundle: ..., traitCollection: ...)`
    static func carticon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carticon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cashondelivery", bundle: ..., traitCollection: ...)`
    static func cashondelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cashondelivery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat1", bundle: ..., traitCollection: ...)`
    static func cat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat2", bundle: ..., traitCollection: ...)`
    static func cat2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat3", bundle: ..., traitCollection: ...)`
    static func cat3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat4", bundle: ..., traitCollection: ...)`
    static func cat4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat5", bundle: ..., traitCollection: ...)`
    static func cat5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat6", bundle: ..., traitCollection: ...)`
    static func cat6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "changelangicon", bundle: ..., traitCollection: ...)`
    static func changelangicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changelangicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chatnew12", bundle: ..., traitCollection: ...)`
    static func chatnew12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatnew12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_new_selected", bundle: ..., traitCollection: ...)`
    static func check_new_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_new_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_new_unselected", bundle: ..., traitCollection: ...)`
    static func check_new_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_new_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checked_white", bundle: ..., traitCollection: ...)`
    static func checked_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checked_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle_back", bundle: ..., traitCollection: ...)`
    static func circle_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cotwoavoid_ic", bundle: ..., traitCollection: ...)`
    static func cotwoavoid_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cotwoavoid_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "debitcard", bundle: ..., traitCollection: ...)`
    static func debitcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.debitcard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discount_food_big_img", bundle: ..., traitCollection: ...)`
    static func discount_food_big_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discount_food_big_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "discountimg2", bundle: ..., traitCollection: ...)`
    static func discountimg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discountimg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarow", bundle: ..., traitCollection: ...)`
    static func downarow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editpronew", bundle: ..., traitCollection: ...)`
    static func editpronew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editpronew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_cart", bundle: ..., traitCollection: ...)`
    static func empty_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_notification", bundle: ..., traitCollection: ...)`
    static func empty_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_transaction", bundle: ..., traitCollection: ...)`
    static func empty_transaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_transaction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_active", bundle: ..., traitCollection: ...)`
    static func fav_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_deactive", bundle: ..., traitCollection: ...)`
    static func fav_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_selected", bundle: ..., traitCollection: ...)`
    static func fav_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food_details", bundle: ..., traitCollection: ...)`
    static func food_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foodimg", bundle: ..., traitCollection: ...)`
    static func foodimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "forward_ic", bundle: ..., traitCollection: ...)`
    static func forward_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleplus", bundle: ..., traitCollection: ...)`
    static func googleplus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleplus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_call", bundle: ..., traitCollection: ...)`
    static func grey_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_icon", bundle: ..., traitCollection: ...)`
    static func grey_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grey_round_edge_back", bundle: ..., traitCollection: ...)`
    static func grey_round_edge_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grey_round_edge_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyblackback", bundle: ..., traitCollection: ...)`
    static func greyblackback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyblackback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyclock", bundle: ..., traitCollection: ...)`
    static func greyclock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyclock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpnew", bundle: ..., traitCollection: ...)`
    static func helpnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "historynew", bundle: ..., traitCollection: ...)`
    static func historynew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historynew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_active", bundle: ..., traitCollection: ...)`
    static func home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "horizontal_menu", bundle: ..., traitCollection: ...)`
    static func horizontal_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontal_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "humbleicons_chat", bundle: ..., traitCollection: ...)`
    static func humbleicons_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humbleicons_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_CheckedCircle_Black", bundle: ..., traitCollection: ...)`
    static func ic_CheckedCircle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_CheckedCircle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Circle_Black", bundle: ..., traitCollection: ...)`
    static func ic_Circle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Circle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin1", bundle: ..., traitCollection: ...)`
    static func ic_pin1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin2", bundle: ..., traitCollection: ...)`
    static func ic_pin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend", bundle: ..., traitCollection: ...)`
    static func invitefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invitefriend_big_ic", bundle: ..., traitCollection: ...)`
    static func invitefriend_big_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invitefriend_big_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_grey", bundle: ..., traitCollection: ...)`
    static func location_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logobackgrey", bundle: ..., traitCollection: ...)`
    static func logobackgrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logobackgrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoutnew", bundle: ..., traitCollection: ...)`
    static func logoutnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "macdonladicon", bundle: ..., traitCollection: ...)`
    static func macdonladicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.macdonladicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag2", bundle: ..., traitCollection: ...)`
    static func magic_bag2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "magic_bag_big_image", bundle: ..., traitCollection: ...)`
    static func magic_bag_big_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_bag_big_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapi", bundle: ..., traitCollection: ...)`
    static func mapi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapimg", bundle: ..., traitCollection: ...)`
    static func mapimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mastercard", bundle: ..., traitCollection: ...)`
    static func mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "material-symbols_add-call", bundle: ..., traitCollection: ...)`
    static func materialSymbols_addCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialSymbols_addCall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minusnew", bundle: ..., traitCollection: ...)`
    static func minusnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mobilei", bundle: ..., traitCollection: ...)`
    static func mobilei(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobilei, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "money_saved", bundle: ..., traitCollection: ...)`
    static func money_saved(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money_saved, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moneysaved_ic", bundle: ..., traitCollection: ...)`
    static func moneysaved_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneysaved_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mycart", bundle: ..., traitCollection: ...)`
    static func mycart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mycart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_deactive", bundle: ..., traitCollection: ...)`
    static func notification_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notiimage", bundle: ..., traitCollection: ...)`
    static func notiimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_active", bundle: ..., traitCollection: ...)`
    static func order_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_deactive", bundle: ..., traitCollection: ...)`
    static func order_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pass", bundle: ..., traitCollection: ...)`
    static func pass(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentsuccess", bundle: ..., traitCollection: ...)`
    static func paymentsuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentsuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinone", bundle: ..., traitCollection: ...)`
    static func pinone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinthree", bundle: ..., traitCollection: ...)`
    static func pinthree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinthree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pintwo", bundle: ..., traitCollection: ...)`
    static func pintwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pintwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pipeshop", bundle: ..., traitCollection: ...)`
    static func pipeshop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pipeshop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_grey", bundle: ..., traitCollection: ...)`
    static func plus_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusnew", bundle: ..., traitCollection: ...)`
    static func plusnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy", bundle: ..., traitCollection: ...)`
    static func privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ratingbackground", bundle: ..., traitCollection: ...)`
    static func ratingbackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ratingbackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image", bundle: ..., traitCollection: ...)`
    static func rest_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rest_image2", bundle: ..., traitCollection: ...)`
    static func rest_image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rest_image2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reviewicon1", bundle: ..., traitCollection: ...)`
    static func reviewicon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewicon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riversand1", bundle: ..., traitCollection: ...)`
    static func riversand1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riversand1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "riversand2", bundle: ..., traitCollection: ...)`
    static func riversand2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.riversand2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sand1", bundle: ..., traitCollection: ...)`
    static func sand1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sand1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sand2", bundle: ..., traitCollection: ...)`
    static func sand2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sand2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchfilm", bundle: ..., traitCollection: ...)`
    static func searchfilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchfilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendbtnbg", bundle: ..., traitCollection: ...)`
    static func sendbtnbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendbtnbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendbtnnew", bundle: ..., traitCollection: ...)`
    static func sendbtnnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendbtnnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendnew", bundle: ..., traitCollection: ...)`
    static func sendnew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendnew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharenew", bundle: ..., traitCollection: ...)`
    static func sharenew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharenew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spidrop", bundle: ..., traitCollection: ...)`
    static func spidrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spidrop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashbg", bundle: ..., traitCollection: ...)`
    static func splashbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star1", bundle: ..., traitCollection: ...)`
    static func star1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storefilm", bundle: ..., traitCollection: ...)`
    static func storefilm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storefilm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stripe", bundle: ..., traitCollection: ...)`
    static func stripe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stripe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success_order_img", bundle: ..., traitCollection: ...)`
    static func success_order_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success_order_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "termsofservice", bundle: ..., traitCollection: ...)`
    static func termsofservice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsofservice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topup", bundle: ..., traitCollection: ...)`
    static func topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topupsuccess_ic", bundle: ..., traitCollection: ...)`
    static func topupsuccess_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topupsuccess_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transpng", bundle: ..., traitCollection: ...)`
    static func transpng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transpng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck1", bundle: ..., traitCollection: ...)`
    static func truck1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck2", bundle: ..., traitCollection: ...)`
    static func truck2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "truck3", bundle: ..., traitCollection: ...)`
    static func truck3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.truck3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked_white", bundle: ..., traitCollection: ...)`
    static func unchecked_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploadimg_new", bundle: ..., traitCollection: ...)`
    static func uploadimg_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadimg_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userdemoimg", bundle: ..., traitCollection: ...)`
    static func userdemoimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userdemoimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "useri", bundle: ..., traitCollection: ...)`
    static func useri(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.useri, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view", bundle: ..., traitCollection: ...)`
    static func view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "view_eye", bundle: ..., traitCollection: ...)`
    static func view_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view_eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "visa", bundle: ..., traitCollection: ...)`
    static func visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "waitingicon", bundle: ..., traitCollection: ...)`
    static func waitingicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.waitingicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet_back", bundle: ..., traitCollection: ...)`
    static func wallet_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "walleticon1", bundle: ..., traitCollection: ...)`
    static func walleticon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walleticon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "watertruck", bundle: ..., traitCollection: ...)`
    static func watertruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watertruck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomeb", bundle: ..., traitCollection: ...)`
    static func welcomeb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomeb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomebg", bundle: ..., traitCollection: ...)`
    static func welcomebg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomebg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whitecart", bundle: ..., traitCollection: ...)`
    static func whitecart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whitecart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous", bundle: ..., traitCollection: ...)`
    static func writetous(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "writetous_ic", bundle: ..., traitCollection: ...)`
    static func writetous_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writetous_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AdminContactCell`.
    static let adminContactCell = _R.nib._AdminContactCell()
    /// Nib `CartCell`.
    static let cartCell = _R.nib._CartCell()
    /// Nib `LandingCell`.
    static let landingCell = _R.nib._LandingCell()
    /// Nib `LastChatCell`.
    static let lastChatCell = _R.nib._LastChatCell()
    /// Nib `NewRequestCell`.
    static let newRequestCell = _R.nib._NewRequestCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `PlaceOrderImgCell`.
    static let placeOrderImgCell = _R.nib._PlaceOrderImgCell()
    /// Nib `RatingReviewCell`.
    static let ratingReviewCell = _R.nib._RatingReviewCell()
    /// Nib `RequestCell`.
    static let requestCell = _R.nib._RequestCell()
    /// Nib `VehicleTypeCell`.
    static let vehicleTypeCell = _R.nib._VehicleTypeCell()
    /// Nib `WithdrawCell`.
    static let withdrawCell = _R.nib._WithdrawCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AdminContactCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.adminContactCell) instead")
    static func adminContactCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adminContactCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartCell) instead")
    static func cartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LandingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.landingCell) instead")
    static func landingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.landingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LastChatCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lastChatCell) instead")
    static func lastChatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lastChatCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewRequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newRequestCell) instead")
    static func newRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newRequestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlaceOrderImgCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.placeOrderImgCell) instead")
    static func placeOrderImgCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.placeOrderImgCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RatingReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ratingReviewCell) instead")
    static func ratingReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ratingReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RequestCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestCell) instead")
    static func requestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VehicleTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vehicleTypeCell) instead")
    static func vehicleTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vehicleTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WithdrawCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawCell) instead")
    static func withdrawCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawCell)
    }
    #endif

    static func adminContactCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdminContactCell? {
      return R.nib.adminContactCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdminContactCell
    }

    static func cartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
      return R.nib.cartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
    }

    static func landingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
      return R.nib.landingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
    }

    static func lastChatCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LastChatCell? {
      return R.nib.lastChatCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastChatCell
    }

    static func newRequestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewRequestCell? {
      return R.nib.newRequestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewRequestCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func placeOrderImgCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlaceOrderImgCell? {
      return R.nib.placeOrderImgCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaceOrderImgCell
    }

    static func ratingReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingReviewCell? {
      return R.nib.ratingReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingReviewCell
    }

    static func requestCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestCell? {
      return R.nib.requestCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestCell
    }

    static func vehicleTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VehicleTypeCell? {
      return R.nib.vehicleTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VehicleTypeCell
    }

    static func withdrawCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawCell? {
      return R.nib.withdrawCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AdminContactCell`.
    static let adminContactCell: Rswift.ReuseIdentifier<AdminContactCell> = Rswift.ReuseIdentifier(identifier: "AdminContactCell")
    /// Reuse identifier `CartCell`.
    static let cartCell: Rswift.ReuseIdentifier<CartCell> = Rswift.ReuseIdentifier(identifier: "CartCell")
    /// Reuse identifier `LandingCell`.
    static let landingCell: Rswift.ReuseIdentifier<LandingCell> = Rswift.ReuseIdentifier(identifier: "LandingCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `PlaceOrderImgCell`.
    static let placeOrderImgCell: Rswift.ReuseIdentifier<PlaceOrderImgCell> = Rswift.ReuseIdentifier(identifier: "PlaceOrderImgCell")
    /// Reuse identifier `RatingReviewCell`.
    static let ratingReviewCell: Rswift.ReuseIdentifier<RatingReviewCell> = Rswift.ReuseIdentifier(identifier: "RatingReviewCell")
    /// Reuse identifier `RequestCell`.
    static let requestCell: Rswift.ReuseIdentifier<RequestCell> = Rswift.ReuseIdentifier(identifier: "RequestCell")
    /// Reuse identifier `VehicleTypeCell`.
    static let vehicleTypeCell: Rswift.ReuseIdentifier<VehicleTypeCell> = Rswift.ReuseIdentifier(identifier: "VehicleTypeCell")
    /// Reuse identifier `WithdrawCell`.
    static let withdrawCell: Rswift.ReuseIdentifier<WithdrawCell> = Rswift.ReuseIdentifier(identifier: "WithdrawCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 214 localization keys.
    struct localizable {
      /// en translation: 2200 SR
      ///
      /// Locales: en, ar, ur
      static let sR = Rswift.StringResource(key: "2200 SR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, ar, ur
      static let accept = Rswift.StringResource(key: "Accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Account Holder Name
      ///
      /// Locales: en, ar, ur
      static let accountHolderName = Rswift.StringResource(key: "Account Holder Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Account Number
      ///
      /// Locales: en, ar, ur
      static let accountNumber = Rswift.StringResource(key: "Account Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, ar, ur
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: After your first transaction, you will be able to see it here
      ///
      /// Locales: en, ar, ur
      static let afterYourFirstTransactionYouWillBeAbleToSeeItHere = Rswift.StringResource(key: "After your first transaction, you will be able to see it here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Already have an account? Login Now
      ///
      /// Locales: en, ar, ur
      static let alreadyHaveAnAccountLoginNow = Rswift.StringResource(key: "Already have an account? Login Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, ar, ur
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Application Fee
      ///
      /// Locales: en, ar, ur
      static let applicationFee = Rswift.StringResource(key: "Application Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Arabic
      ///
      /// Locales: en, ar, ur
      static let arabic = Rswift.StringResource(key: "Arabic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Are you sure you want to delete your account?
      ///
      /// Locales: en, ar, ur
      static let areYouSureYouWantToDeleteYourAccount = Rswift.StringResource(key: "Are you sure you want to delete your account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Assigned
      ///
      /// Locales: en, ar, ur
      static let assigned = Rswift.StringResource(key: "Assigned", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Available
      ///
      /// Locales: en, ar, ur
      static let available = Rswift.StringResource(key: "Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Awaiting Customer Approval
      ///
      /// Locales: en, ar, ur
      static let awaitingCustomerApproval = Rswift.StringResource(key: "Awaiting Customer Approval", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Bank Name
      ///
      /// Locales: en, ar, ur
      static let bankName = Rswift.StringResource(key: "Bank Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Bid Rejected Successfully
      ///
      /// Locales: en, ar, ur
      static let bidRejectedSuccessfully = Rswift.StringResource(key: "Bid Rejected Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, ar, ur
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar, ur
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ar, ur
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Change the language
      ///
      /// Locales: en, ar, ur
      static let changeTheLanguage = Rswift.StringResource(key: "Change the language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en, ar, ur
      static let chat = Rswift.StringResource(key: "Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Choose Service
      ///
      /// Locales: en, ar, ur
      static let chooseService = Rswift.StringResource(key: "Choose Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Choose Service Type
      ///
      /// Locales: en, ar, ur
      static let chooseServiceType = Rswift.StringResource(key: "Choose Service Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Choose Your Language
      ///
      /// Locales: en, ar, ur
      static let chooseYourLanguage = Rswift.StringResource(key: "Choose Your Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, ar, ur
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, ar, ur
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Confirmed
      ///
      /// Locales: en, ar, ur
      static let confirmed = Rswift.StringResource(key: "Confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Congratulation your account has been created successfully
      ///
      /// Locales: en, ar, ur
      static let congratulationYourAccountHasBeenCreatedSuccessfully = Rswift.StringResource(key: "Congratulation your account has been created successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Customer Note:
      ///
      /// Locales: en, ar, ur
      static let customerNote = Rswift.StringResource(key: "Customer Note:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, ar, ur
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Delivered
      ///
      /// Locales: en, ar, ur
      static let delivered = Rswift.StringResource(key: "Delivered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Delivery Cost
      ///
      /// Locales: en, ar, ur
      static let deliveryCost = Rswift.StringResource(key: "Delivery Cost", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Delivery Type
      ///
      /// Locales: en, ar, ur
      static let deliveryType = Rswift.StringResource(key: "Delivery Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Detail
      ///
      /// Locales: en, ar, ur
      static let detail = Rswift.StringResource(key: "Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Don't have an account? Signup Now
      ///
      /// Locales: en, ar, ur
      static let donTHaveAnAccountSignupNow = Rswift.StringResource(key: "Don't have an account? Signup Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, ar, ur
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Driver
      ///
      /// Locales: en, ar, ur
      static let driver = Rswift.StringResource(key: "Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Driving Experience
      ///
      /// Locales: en, ar, ur
      static let drivingExperience = Rswift.StringResource(key: "Driving Experience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, ar, ur
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ar, ur
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, ar, ur
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, ar, ur
      static let enter = Rswift.StringResource(key: "Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter First Name
      ///
      /// Locales: en, ar, ur
      static let enterFirstName = Rswift.StringResource(key: "Enter First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter Last Name
      ///
      /// Locales: en, ar, ur
      static let enterLastName = Rswift.StringResource(key: "Enter Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter Vehicle Name
      ///
      /// Locales: en, ar, ur
      static let enterVehicleName = Rswift.StringResource(key: "Enter Vehicle Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter Your Offer
      ///
      /// Locales: en, ar, ur
      static let enterYourOffer = Rswift.StringResource(key: "Enter Your Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter code
      ///
      /// Locales: en, ar, ur
      static let enterCode = Rswift.StringResource(key: "Enter code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter name
      ///
      /// Locales: en, ar, ur
      static let enterName = Rswift.StringResource(key: "Enter name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter new password
      ///
      /// Locales: en, ar, ur
      static let enterNewPassword = Rswift.StringResource(key: "Enter new password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter old password
      ///
      /// Locales: en, ar, ur
      static let enterOldPassword = Rswift.StringResource(key: "Enter old password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter withdraw amount
      ///
      /// Locales: en, ar, ur
      static let enterWithdrawAmount = Rswift.StringResource(key: "Enter withdraw amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar, ur
      static let enterYourEmailAddressToResetYourPassword = Rswift.StringResource(key: "Enter your email address to reset your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Execution
      ///
      /// Locales: en, ar, ur
      static let execution = Rswift.StringResource(key: "Execution", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Find Address
      ///
      /// Locales: en, ar, ur
      static let findAddress = Rswift.StringResource(key: "Find Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, ar, ur
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Front View
      ///
      /// Locales: en, ar, ur
      static let frontView = Rswift.StringResource(key: "Front View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, ar, ur
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Get Started
      ///
      /// Locales: en, ar, ur
      static let getStarted = Rswift.StringResource(key: "Get Started", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, ar, ur
      static let giveRating = Rswift.StringResource(key: "Give Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Have you received the amount of
      ///
      /// Locales: en, ar, ur
      static let haveYouReceivedTheAmountOf = Rswift.StringResource(key: "Have you received the amount of", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, ar, ur
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Help Center
      ///
      /// Locales: en, ar, ur
      static let helpCenter = Rswift.StringResource(key: "Help Center", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ar, ur
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: How can we help you?
      ///
      /// Locales: en, ar, ur
      static let howCanWeHelpYou = Rswift.StringResource(key: "How can we help you?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: I have read the Terms & Condition and accept them
      ///
      /// Locales: en, ar, ur
      static let iHaveReadTheTermsConditionAndAcceptThem = Rswift.StringResource(key: "I have read the Terms & Condition and accept them", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: IBAN Number
      ///
      /// Locales: en, ar, ur
      static let ibanNumber = Rswift.StringResource(key: "IBAN Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: If you want any support from admin then you can write him.
      ///
      /// Locales: en, ar, ur
      static let ifYouWantAnySupportFromAdminThenYouCanWriteHim = Rswift.StringResource(key: "If you want any support from admin then you can write him.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Ifsc Code
      ///
      /// Locales: en, ar, ur
      static let ifscCode = Rswift.StringResource(key: "Ifsc Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: In Progress
      ///
      /// Locales: en, ar, ur
      static let inProgress = Rswift.StringResource(key: "In Progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Invalid expiry date format.
      ///
      /// Locales: en, ar, ur
      static let invalidExpiryDateFormat = Rswift.StringResource(key: "Invalid expiry date format.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Join Kafak as a trusted Driver!
      ///
      /// Locales: en, ar, ur
      static let joinKafakAsATrustedDriver = Rswift.StringResource(key: "Join Kafak as a trusted Driver!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, ur
      static let label = Rswift.StringResource(key: "Label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, ar, ur
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, ar, ur
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Login Now
      ///
      /// Locales: en, ar, ur
      static let loginNow = Rswift.StringResource(key: "Login Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ar, ur
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Make Payment
      ///
      /// Locales: en, ar, ur
      static let makePayment = Rswift.StringResource(key: "Make Payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Make an Offer
      ///
      /// Locales: en, ar, ur
      static let makeAnOffer = Rswift.StringResource(key: "Make an Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Mark as Arrived
      ///
      /// Locales: en, ar, ur
      static let markAsArrived = Rswift.StringResource(key: "Mark as Arrived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Mark as Delivered
      ///
      /// Locales: en, ar, ur
      static let markAsDelivered = Rswift.StringResource(key: "Mark as Delivered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, ar, ur
      static let mobile = Rswift.StringResource(key: "Mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Mobile Number
      ///
      /// Locales: en, ar, ur
      static let mobileNumber = Rswift.StringResource(key: "Mobile Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: My Review
      ///
      /// Locales: en, ar, ur
      static let myReview = Rswift.StringResource(key: "My Review", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, ar, ur
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: New Request
      ///
      /// Locales: en, ar, ur
      static let newRequest = Rswift.StringResource(key: "New Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, ar, ur
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ar, ur
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: No internet connection make sure your device is connected to the internet
      ///
      /// Locales: en, ar, ur
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No internet connection make sure your device is connected to the internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: No transaction yet
      ///
      /// Locales: en, ar, ur
      static let noTransactionYet = Rswift.StringResource(key: "No transaction yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, ar, ur
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Ongoing
      ///
      /// Locales: en, ar, ur
      static let ongoing = Rswift.StringResource(key: "Ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, ar, ur
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Order Date:
      ///
      /// Locales: en, ar, ur
      static let orderDate = Rswift.StringResource(key: "Order Date:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ar, ur
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Password mismatched, please enter the same password
      ///
      /// Locales: en, ar, ur
      static let passwordMismatchedPleaseEnterTheSamePassword = Rswift.StringResource(key: "Password mismatched, please enter the same password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Payment Confirmation
      ///
      /// Locales: en, ar, ur
      static let paymentConfirmation = Rswift.StringResource(key: "Payment Confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Payment Received?
      ///
      /// Locales: en, ar, ur
      static let paymentReceived = Rswift.StringResource(key: "Payment Received?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Pending(Awaiting Customer Approval)
      ///
      /// Locales: en, ar, ur
      static let pendingAwaitingCustomerApproval = Rswift.StringResource(key: "Pending(Awaiting Customer Approval)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Person rate it
      ///
      /// Locales: en, ar, ur
      static let personRateIt = Rswift.StringResource(key: "Person rate it", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please add rate
      ///
      /// Locales: en, ar, ur
      static let pleaseAddRate = Rswift.StringResource(key: "Please add rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please confirm the password
      ///
      /// Locales: en, ar, ur
      static let pleaseConfirmThePassword = Rswift.StringResource(key: "Please confirm the password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter Bank Name
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterBankName = Rswift.StringResource(key: "Please enter Bank Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter a valid 16-digit card number.
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterAValid16DigitCardNumber = Rswift.StringResource(key: "Please enter a valid 16-digit card number.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter a valid CVV.
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterAValidCVV = Rswift.StringResource(key: "Please enter a valid CVV.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter a valid month.
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterAValidMonth = Rswift.StringResource(key: "Please enter a valid month.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter account number
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterAccountNumber = Rswift.StringResource(key: "Please enter account number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter amount
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterAmount = Rswift.StringResource(key: "Please enter amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter expiry date in MM/YY format.
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterExpiryDateInMMYYFormat = Rswift.StringResource(key: "Please enter expiry date in MM/YY format.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter lower or equal amount than your wallet balance
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterLowerOrEqualAmountThanYourWalletBalance = Rswift.StringResource(key: "Please enter lower or equal amount than your wallet balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the IBAN Number
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheIBANNumber = Rswift.StringResource(key: "Please enter the IBAN Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the account holder name
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheAccountHolderName = Rswift.StringResource(key: "Please enter the account holder name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the bid amount
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheBidAmount = Rswift.StringResource(key: "Please enter the bid amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the card holder's name.
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheCardHolderSName = Rswift.StringResource(key: "Please enter the card holder's name.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the description
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheDescription = Rswift.StringResource(key: "Please enter the description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the email address
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheEmailAddress = Rswift.StringResource(key: "Please enter the email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the first name
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheFirstName = Rswift.StringResource(key: "Please enter the first name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the last name
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheLastName = Rswift.StringResource(key: "Please enter the last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the message
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheMessage = Rswift.StringResource(key: "Please enter the message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the mobile number
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheMobileNumber = Rswift.StringResource(key: "Please enter the mobile number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the new password
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheNewPassword = Rswift.StringResource(key: "Please enter the new password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the password
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterThePassword = Rswift.StringResource(key: "Please enter the password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the review
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheReview = Rswift.StringResource(key: "Please enter the review", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter the vehicle name
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterTheVehicleName = Rswift.StringResource(key: "Please enter the vehicle name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please enter your driving experience
      ///
      /// Locales: en, ar, ur
      static let pleaseEnterYourDrivingExperience = Rswift.StringResource(key: "Please enter your driving experience", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please read the Terms and Conditions for proceed
      ///
      /// Locales: en, ar, ur
      static let pleaseReadTheTermsAndConditionsForProceed = Rswift.StringResource(key: "Please read the Terms and Conditions for proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please select the delivery type
      ///
      /// Locales: en, ar, ur
      static let pleaseSelectTheDeliveryType = Rswift.StringResource(key: "Please select the delivery type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please select the service
      ///
      /// Locales: en, ar, ur
      static let pleaseSelectTheService = Rswift.StringResource(key: "Please select the service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please select the sub service
      ///
      /// Locales: en, ar, ur
      static let pleaseSelectTheSubService = Rswift.StringResource(key: "Please select the sub service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Please select the vehicle type
      ///
      /// Locales: en, ar, ur
      static let pleaseSelectTheVehicleType = Rswift.StringResource(key: "Please select the vehicle type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en, ar, ur
      static let price = Rswift.StringResource(key: "Price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, ar, ur
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Proceed
      ///
      /// Locales: en, ar, ur
      static let proceed = Rswift.StringResource(key: "Proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Profile Updated Successfully
      ///
      /// Locales: en, ar, ur
      static let profileUpdatedSuccessfully = Rswift.StringResource(key: "Profile Updated Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Provide review rating
      ///
      /// Locales: en, ar, ur
      static let provideReviewRating = Rswift.StringResource(key: "Provide review rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Quantity
      ///
      /// Locales: en, ar, ur
      static let quantity = Rswift.StringResource(key: "Quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Query
      ///
      /// Locales: en, ar, ur
      static let query = Rswift.StringResource(key: "Query", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Rear View
      ///
      /// Locales: en, ar, ur
      static let rearView = Rswift.StringResource(key: "Rear View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Receiving offers
      ///
      /// Locales: en, ar, ur
      static let receivingOffers = Rswift.StringResource(key: "Receiving offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, ar, ur
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, ar, ur
      static let reject = Rswift.StringResource(key: "Reject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Rejected Successfully
      ///
      /// Locales: en, ar, ur
      static let rejectedSuccessfully = Rswift.StringResource(key: "Rejected Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Request For
      ///
      /// Locales: en, ar, ur
      static let requestFor = Rswift.StringResource(key: "Request For", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Requests
      ///
      /// Locales: en, ar, ur
      static let requests = Rswift.StringResource(key: "Requests", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Reset Password
      ///
      /// Locales: en, ar, ur
      static let resetPassword = Rswift.StringResource(key: "Reset Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Robert Fox
      ///
      /// Locales: en, ar, ur
      static let robertFox = Rswift.StringResource(key: "Robert Fox", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, ar, ur
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, ar, ur
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: en, ar, ur
      static let searchLocation = Rswift.StringResource(key: "Search Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Search for Location
      ///
      /// Locales: en, ar, ur
      static let searchForLocation = Rswift.StringResource(key: "Search for Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: See Map
      ///
      /// Locales: en, ar, ur
      static let seeMap = Rswift.StringResource(key: "See Map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Delivery Type
      ///
      /// Locales: en, ar, ur
      static let selectDeliveryType = Rswift.StringResource(key: "Select Delivery Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Language
      ///
      /// Locales: en, ar, ur
      static let selectLanguage = Rswift.StringResource(key: "Select Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Payment Method
      ///
      /// Locales: en, ar, ur
      static let selectPaymentMethod = Rswift.StringResource(key: "Select Payment Method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Service
      ///
      /// Locales: en, ar, ur
      static let selectService = Rswift.StringResource(key: "Select Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Service Type
      ///
      /// Locales: en, ar, ur
      static let selectServiceType = Rswift.StringResource(key: "Select Service Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select Vehicle Type
      ///
      /// Locales: en, ar, ur
      static let selectVehicleType = Rswift.StringResource(key: "Select Vehicle Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Select account type
      ///
      /// Locales: en, ar, ur
      static let selectAccountType = Rswift.StringResource(key: "Select account type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, ar, ur
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Send Offer
      ///
      /// Locales: en, ar, ur
      static let sendOffer = Rswift.StringResource(key: "Send Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Send Request
      ///
      /// Locales: en, ar, ur
      static let sendRequest = Rswift.StringResource(key: "Send Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Send To Requester
      ///
      /// Locales: en, ar, ur
      static let sendToRequester = Rswift.StringResource(key: "Send To Requester", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ar, ur
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Share App
      ///
      /// Locales: en, ar, ur
      static let shareApp = Rswift.StringResource(key: "Share App", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Side View
      ///
      /// Locales: en, ar, ur
      static let sideView = Rswift.StringResource(key: "Side View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, ar, ur
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, ar, ur
      static let signUp = Rswift.StringResource(key: "Sign Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Signup Now
      ///
      /// Locales: en, ar, ur
      static let signupNow = Rswift.StringResource(key: "Signup Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, ar, ur
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, ar, ur
      static let start = Rswift.StringResource(key: "Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Start Order
      ///
      /// Locales: en, ar, ur
      static let startOrder = Rswift.StringResource(key: "Start Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Start earning with reliable and steady work.
      ///
      /// Locales: en, ar, ur
      static let startEarningWithReliableAndSteadyWork = Rswift.StringResource(key: "Start earning with reliable and steady work.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, ar, ur
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Sure you received the full payment of this job from client?
      ///
      /// Locales: en, ar, ur
      static let sureYouReceivedTheFullPaymentOfThisJobFromClient = Rswift.StringResource(key: "Sure you received the full payment of this job from client?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Term of services
      ///
      /// Locales: en, ar, ur
      static let termOfServices = Rswift.StringResource(key: "Term of services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Thanks You for Request!
      ///
      /// Locales: en, ar, ur
      static let thanksYouForRequest = Rswift.StringResource(key: "Thanks You for Request!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: The card has expired.
      ///
      /// Locales: en, ar, ur
      static let theCardHasExpired = Rswift.StringResource(key: "The card has expired.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: This request status is delivered. So you can not chat
      ///
      /// Locales: en, ar, ur
      static let thisRequestStatusIsDeliveredSoYouCanNotChat = Rswift.StringResource(key: "This request status is delivered. So you can not chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Top Up
      ///
      /// Locales: en, ar, ur
      static let topUp = Rswift.StringResource(key: "Top Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Topup successfully done
      ///
      /// Locales: en, ar, ur
      static let topupSuccessfullyDone = Rswift.StringResource(key: "Topup successfully done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: en, ar, ur
      static let totalAmount = Rswift.StringResource(key: "Total Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Total Earning
      ///
      /// Locales: en, ar, ur
      static let totalEarning = Rswift.StringResource(key: "Total Earning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Transaction History
      ///
      /// Locales: en, ar, ur
      static let transactionHistory = Rswift.StringResource(key: "Transaction History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Type Something
      ///
      /// Locales: en, ur
      static let typeSomething = Rswift.StringResource(key: "Type Something...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ur"], comment: nil)
      /// en translation: Un-Available
      ///
      /// Locales: en, ar, ur
      static let unAvailable = Rswift.StringResource(key: "Un-Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Update Offer
      ///
      /// Locales: en, ar, ur
      static let updateOffer = Rswift.StringResource(key: "Update Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Urdu
      ///
      /// Locales: en, ar, ur
      static let urdu = Rswift.StringResource(key: "Urdu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Vehicle Images
      ///
      /// Locales: en, ar, ur
      static let vehicleImages = Rswift.StringResource(key: "Vehicle Images", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Vehicle Name
      ///
      /// Locales: en, ar, ur
      static let vehicleName = Rswift.StringResource(key: "Vehicle Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Vehicle Type
      ///
      /// Locales: en, ar, ur
      static let vehicleType = Rswift.StringResource(key: "Vehicle Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, ar, ur
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: We will contact you soon
      ///
      /// Locales: en, ar, ur
      static let weWillContactYouSoon = Rswift.StringResource(key: "We will contact you soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, ar, ur
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Welcome! Please enter your information below and get started.
      ///
      /// Locales: en, ar, ur
      static let welcomePleaseEnterYourInformationBelowAndGetStarted = Rswift.StringResource(key: "Welcome! Please enter your information below and get started.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Withdraw
      ///
      /// Locales: en, ar, ur
      static let withdraw = Rswift.StringResource(key: "Withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Withdraw History
      ///
      /// Locales: en, ar, ur
      static let withdrawHistory = Rswift.StringResource(key: "Withdraw History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Withdrawal
      ///
      /// Locales: en, ar, ur
      static let withdrawal = Rswift.StringResource(key: "Withdrawal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Withdrawal Request
      ///
      /// Locales: en, ar, ur
      static let withdrawalRequest = Rswift.StringResource(key: "Withdrawal Request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Write down your question and problem and we would be happy to help about it
      ///
      /// Locales: en, ar, ur
      static let writeDownYourQuestionAndProblemAndWeWouldBeHappyToHelpAboutIt = Rswift.StringResource(key: "Write down your question and problem and we would be happy to help about it", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Write here
      ///
      /// Locales: en, ar, ur
      static let writeHere = Rswift.StringResource(key: "Write here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en, ar, ur
      static let writeToUs = Rswift.StringResource(key: "Write to us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar, ur
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: You can send this balance to any bank account at a nominal charge
      ///
      /// Locales: en, ar, ur
      static let youCanSendThisBalanceToAnyBankAccountAtANominalCharge = Rswift.StringResource(key: "You can send this balance to any bank account at a nominal charge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: You have 0 notification
      ///
      /// Locales: en, ar, ur
      static let youHave0Notification = Rswift.StringResource(key: "You have 0 notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: You have no orders
      ///
      /// Locales: en, ar, ur
      static let youHaveNoOrders = Rswift.StringResource(key: "You have no orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Your Balance
      ///
      /// Locales: en, ar, ur
      static let yourBalance = Rswift.StringResource(key: "Your Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Your password has been successfully changed
      ///
      /// Locales: en, ar, ur
      static let yourPasswordHasBeenSuccessfullyChanged = Rswift.StringResource(key: "Your password has been successfully changed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Your request added successfully.
      ///
      /// Locales: en, ar, ur
      static let yourRequestAddedSuccessfully = Rswift.StringResource(key: "Your request added successfully.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Your request is sent successfully
      ///
      /// Locales: en, ar, ur
      static let yourRequestIsSentSuccessfully = Rswift.StringResource(key: "Your request is sent successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Your trusted partner for all your construction needs
      ///
      /// Locales: en, ar, ur
      static let yourTrustedPartnerForAllYourConstructionNeeds = Rswift.StringResource(key: "Your trusted partner for all your construction needs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Yuuupi
      ///
      /// Locales: en, ar, ur
      static let yuuupi = Rswift.StringResource(key: "Yuuupi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: in your wallet
      ///
      /// Locales: en, ar, ur
      static let inYourWallet = Rswift.StringResource(key: "in your wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: moh@gmail.com
      ///
      /// Locales: en, ar, ur
      static let mohGmailCom = Rswift.StringResource(key: "moh@gmail.com", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: mt mt
      ///
      /// Locales: en, ar, ur
      static let mtMt = Rswift.StringResource(key: "mt mt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: ok
      ///
      /// Locales: en, ar, ur
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)

      /// en translation: 2200 SR
      ///
      /// Locales: en, ar, ur
      static func sR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2200 SR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "2200 SR"
        }

        return NSLocalizedString("2200 SR", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, ar, ur
      static func accept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Accept"
        }

        return NSLocalizedString("Accept", bundle: bundle, comment: "")
      }

      /// en translation: Account Holder Name
      ///
      /// Locales: en, ar, ur
      static func accountHolderName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account Holder Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account Holder Name"
        }

        return NSLocalizedString("Account Holder Name", bundle: bundle, comment: "")
      }

      /// en translation: Account Number
      ///
      /// Locales: en, ar, ur
      static func accountNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account Number"
        }

        return NSLocalizedString("Account Number", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, ar, ur
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address"
        }

        return NSLocalizedString("Address", bundle: bundle, comment: "")
      }

      /// en translation: After your first transaction, you will be able to see it here
      ///
      /// Locales: en, ar, ur
      static func afterYourFirstTransactionYouWillBeAbleToSeeItHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("After your first transaction, you will be able to see it here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "After your first transaction, you will be able to see it here"
        }

        return NSLocalizedString("After your first transaction, you will be able to see it here", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account? Login Now
      ///
      /// Locales: en, ar, ur
      static func alreadyHaveAnAccountLoginNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have an account? Login Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have an account? Login Now"
        }

        return NSLocalizedString("Already have an account? Login Now", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, ar, ur
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: Application Fee
      ///
      /// Locales: en, ar, ur
      static func applicationFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Application Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Application Fee"
        }

        return NSLocalizedString("Application Fee", bundle: bundle, comment: "")
      }

      /// en translation: Arabic
      ///
      /// Locales: en, ar, ur
      static func arabic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arabic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arabic"
        }

        return NSLocalizedString("Arabic", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete your account?
      ///
      /// Locales: en, ar, ur
      static func areYouSureYouWantToDeleteYourAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete your account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete your account?"
        }

        return NSLocalizedString("Are you sure you want to delete your account?", bundle: bundle, comment: "")
      }

      /// en translation: Assigned
      ///
      /// Locales: en, ar, ur
      static func assigned(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Assigned", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Assigned"
        }

        return NSLocalizedString("Assigned", bundle: bundle, comment: "")
      }

      /// en translation: Available
      ///
      /// Locales: en, ar, ur
      static func available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Available"
        }

        return NSLocalizedString("Available", bundle: bundle, comment: "")
      }

      /// en translation: Awaiting Customer Approval
      ///
      /// Locales: en, ar, ur
      static func awaitingCustomerApproval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Awaiting Customer Approval", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Awaiting Customer Approval"
        }

        return NSLocalizedString("Awaiting Customer Approval", bundle: bundle, comment: "")
      }

      /// en translation: Bank Name
      ///
      /// Locales: en, ar, ur
      static func bankName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bank Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bank Name"
        }

        return NSLocalizedString("Bank Name", bundle: bundle, comment: "")
      }

      /// en translation: Bid Rejected Successfully
      ///
      /// Locales: en, ar, ur
      static func bidRejectedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bid Rejected Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bid Rejected Successfully"
        }

        return NSLocalizedString("Bid Rejected Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, ar, ur
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar, ur
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ar, ur
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Change the language
      ///
      /// Locales: en, ar, ur
      static func changeTheLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change the language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change the language"
        }

        return NSLocalizedString("Change the language", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en, ar, ur
      static func chat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chat"
        }

        return NSLocalizedString("Chat", bundle: bundle, comment: "")
      }

      /// en translation: Choose Service
      ///
      /// Locales: en, ar, ur
      static func chooseService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Service"
        }

        return NSLocalizedString("Choose Service", bundle: bundle, comment: "")
      }

      /// en translation: Choose Service Type
      ///
      /// Locales: en, ar, ur
      static func chooseServiceType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Service Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Service Type"
        }

        return NSLocalizedString("Choose Service Type", bundle: bundle, comment: "")
      }

      /// en translation: Choose Your Language
      ///
      /// Locales: en, ar, ur
      static func chooseYourLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Your Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Your Language"
        }

        return NSLocalizedString("Choose Your Language", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, ar, ur
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed"
        }

        return NSLocalizedString("Completed", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, ar, ur
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm"
        }

        return NSLocalizedString("Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirmed
      ///
      /// Locales: en, ar, ur
      static func confirmed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirmed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirmed"
        }

        return NSLocalizedString("Confirmed", bundle: bundle, comment: "")
      }

      /// en translation: Congratulation your account has been created successfully
      ///
      /// Locales: en, ar, ur
      static func congratulationYourAccountHasBeenCreatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Congratulation your account has been created successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Congratulation your account has been created successfully"
        }

        return NSLocalizedString("Congratulation your account has been created successfully", bundle: bundle, comment: "")
      }

      /// en translation: Customer Note:
      ///
      /// Locales: en, ar, ur
      static func customerNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Customer Note:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Customer Note:"
        }

        return NSLocalizedString("Customer Note:", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, ar, ur
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Delivered
      ///
      /// Locales: en, ar, ur
      static func delivered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivered"
        }

        return NSLocalizedString("Delivered", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Cost
      ///
      /// Locales: en, ar, ur
      static func deliveryCost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery Cost", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery Cost"
        }

        return NSLocalizedString("Delivery Cost", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Type
      ///
      /// Locales: en, ar, ur
      static func deliveryType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery Type"
        }

        return NSLocalizedString("Delivery Type", bundle: bundle, comment: "")
      }

      /// en translation: Detail
      ///
      /// Locales: en, ar, ur
      static func detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail"
        }

        return NSLocalizedString("Detail", bundle: bundle, comment: "")
      }

      /// en translation: Don't have an account? Signup Now
      ///
      /// Locales: en, ar, ur
      static func donTHaveAnAccountSignupNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't have an account? Signup Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't have an account? Signup Now"
        }

        return NSLocalizedString("Don't have an account? Signup Now", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, ar, ur
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Driver
      ///
      /// Locales: en, ar, ur
      static func driver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Driver"
        }

        return NSLocalizedString("Driver", bundle: bundle, comment: "")
      }

      /// en translation: Driving Experience
      ///
      /// Locales: en, ar, ur
      static func drivingExperience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Driving Experience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Driving Experience"
        }

        return NSLocalizedString("Driving Experience", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, ar, ur
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ar, ur
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, ar, ur
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, ar, ur
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter"
        }

        return NSLocalizedString("Enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter First Name
      ///
      /// Locales: en, ar, ur
      static func enterFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter First Name"
        }

        return NSLocalizedString("Enter First Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Last Name
      ///
      /// Locales: en, ar, ur
      static func enterLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Last Name"
        }

        return NSLocalizedString("Enter Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Vehicle Name
      ///
      /// Locales: en, ar, ur
      static func enterVehicleName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Vehicle Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Vehicle Name"
        }

        return NSLocalizedString("Enter Vehicle Name", bundle: bundle, comment: "")
      }

      /// en translation: Enter Your Offer
      ///
      /// Locales: en, ar, ur
      static func enterYourOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Your Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Your Offer"
        }

        return NSLocalizedString("Enter Your Offer", bundle: bundle, comment: "")
      }

      /// en translation: Enter code
      ///
      /// Locales: en, ar, ur
      static func enterCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter code"
        }

        return NSLocalizedString("Enter code", bundle: bundle, comment: "")
      }

      /// en translation: Enter name
      ///
      /// Locales: en, ar, ur
      static func enterName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter name"
        }

        return NSLocalizedString("Enter name", bundle: bundle, comment: "")
      }

      /// en translation: Enter new password
      ///
      /// Locales: en, ar, ur
      static func enterNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter new password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter new password"
        }

        return NSLocalizedString("Enter new password", bundle: bundle, comment: "")
      }

      /// en translation: Enter old password
      ///
      /// Locales: en, ar, ur
      static func enterOldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter old password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter old password"
        }

        return NSLocalizedString("Enter old password", bundle: bundle, comment: "")
      }

      /// en translation: Enter withdraw amount
      ///
      /// Locales: en, ar, ur
      static func enterWithdrawAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter withdraw amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter withdraw amount"
        }

        return NSLocalizedString("Enter withdraw amount", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar, ur
      static func enterYourEmailAddressToResetYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your email address to reset your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your email address to reset your password"
        }

        return NSLocalizedString("Enter your email address to reset your password", bundle: bundle, comment: "")
      }

      /// en translation: Execution
      ///
      /// Locales: en, ar, ur
      static func execution(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Execution", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Execution"
        }

        return NSLocalizedString("Execution", bundle: bundle, comment: "")
      }

      /// en translation: Find Address
      ///
      /// Locales: en, ar, ur
      static func findAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find Address"
        }

        return NSLocalizedString("Find Address", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, ar, ur
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Front View
      ///
      /// Locales: en, ar, ur
      static func frontView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Front View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Front View"
        }

        return NSLocalizedString("Front View", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, ar, ur
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Get Started
      ///
      /// Locales: en, ar, ur
      static func getStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Get Started", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Get Started"
        }

        return NSLocalizedString("Get Started", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, ar, ur
      static func giveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Rating"
        }

        return NSLocalizedString("Give Rating", bundle: bundle, comment: "")
      }

      /// en translation: Have you received the amount of
      ///
      /// Locales: en, ar, ur
      static func haveYouReceivedTheAmountOf(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Have you received the amount of", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Have you received the amount of"
        }

        return NSLocalizedString("Have you received the amount of", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, ar, ur
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Help Center
      ///
      /// Locales: en, ar, ur
      static func helpCenter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help Center", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help Center"
        }

        return NSLocalizedString("Help Center", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ar, ur
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: How can we help you?
      ///
      /// Locales: en, ar, ur
      static func howCanWeHelpYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How can we help you?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How can we help you?"
        }

        return NSLocalizedString("How can we help you?", bundle: bundle, comment: "")
      }

      /// en translation: I have read the Terms & Condition and accept them
      ///
      /// Locales: en, ar, ur
      static func iHaveReadTheTermsConditionAndAcceptThem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I have read the Terms & Condition and accept them", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I have read the Terms & Condition and accept them"
        }

        return NSLocalizedString("I have read the Terms & Condition and accept them", bundle: bundle, comment: "")
      }

      /// en translation: IBAN Number
      ///
      /// Locales: en, ar, ur
      static func ibanNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IBAN Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "IBAN Number"
        }

        return NSLocalizedString("IBAN Number", bundle: bundle, comment: "")
      }

      /// en translation: If you want any support from admin then you can write him.
      ///
      /// Locales: en, ar, ur
      static func ifYouWantAnySupportFromAdminThenYouCanWriteHim(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If you want any support from admin then you can write him.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If you want any support from admin then you can write him."
        }

        return NSLocalizedString("If you want any support from admin then you can write him.", bundle: bundle, comment: "")
      }

      /// en translation: Ifsc Code
      ///
      /// Locales: en, ar, ur
      static func ifscCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ifsc Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ifsc Code"
        }

        return NSLocalizedString("Ifsc Code", bundle: bundle, comment: "")
      }

      /// en translation: In Progress
      ///
      /// Locales: en, ar, ur
      static func inProgress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("In Progress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "In Progress"
        }

        return NSLocalizedString("In Progress", bundle: bundle, comment: "")
      }

      /// en translation: Invalid expiry date format.
      ///
      /// Locales: en, ar, ur
      static func invalidExpiryDateFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid expiry date format.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid expiry date format."
        }

        return NSLocalizedString("Invalid expiry date format.", bundle: bundle, comment: "")
      }

      /// en translation: Join Kafak as a trusted Driver!
      ///
      /// Locales: en, ar, ur
      static func joinKafakAsATrustedDriver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Join Kafak as a trusted Driver!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Join Kafak as a trusted Driver!"
        }

        return NSLocalizedString("Join Kafak as a trusted Driver!", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, ur
      static func label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label"
        }

        return NSLocalizedString("Label", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, ar, ur
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, ar, ur
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Login Now
      ///
      /// Locales: en, ar, ur
      static func loginNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login Now"
        }

        return NSLocalizedString("Login Now", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ar, ur
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Make Payment
      ///
      /// Locales: en, ar, ur
      static func makePayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Make Payment"
        }

        return NSLocalizedString("Make Payment", bundle: bundle, comment: "")
      }

      /// en translation: Make an Offer
      ///
      /// Locales: en, ar, ur
      static func makeAnOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Make an Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Make an Offer"
        }

        return NSLocalizedString("Make an Offer", bundle: bundle, comment: "")
      }

      /// en translation: Mark as Arrived
      ///
      /// Locales: en, ar, ur
      static func markAsArrived(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mark as Arrived", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mark as Arrived"
        }

        return NSLocalizedString("Mark as Arrived", bundle: bundle, comment: "")
      }

      /// en translation: Mark as Delivered
      ///
      /// Locales: en, ar, ur
      static func markAsDelivered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mark as Delivered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mark as Delivered"
        }

        return NSLocalizedString("Mark as Delivered", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, ar, ur
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile"
        }

        return NSLocalizedString("Mobile", bundle: bundle, comment: "")
      }

      /// en translation: Mobile Number
      ///
      /// Locales: en, ar, ur
      static func mobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile Number"
        }

        return NSLocalizedString("Mobile Number", bundle: bundle, comment: "")
      }

      /// en translation: My Review
      ///
      /// Locales: en, ar, ur
      static func myReview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Review"
        }

        return NSLocalizedString("My Review", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, ar, ur
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: New Request
      ///
      /// Locales: en, ar, ur
      static func newRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Request"
        }

        return NSLocalizedString("New Request", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, ar, ur
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next"
        }

        return NSLocalizedString("Next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ar, ur
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No internet connection make sure your device is connected to the internet
      ///
      /// Locales: en, ar, ur
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No internet connection make sure your device is connected to the internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No internet connection make sure your device is connected to the internet"
        }

        return NSLocalizedString("No internet connection make sure your device is connected to the internet", bundle: bundle, comment: "")
      }

      /// en translation: No transaction yet
      ///
      /// Locales: en, ar, ur
      static func noTransactionYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No transaction yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No transaction yet"
        }

        return NSLocalizedString("No transaction yet", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, ar, ur
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Ongoing
      ///
      /// Locales: en, ar, ur
      static func ongoing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ongoing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ongoing"
        }

        return NSLocalizedString("Ongoing", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, ar, ur
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open"
        }

        return NSLocalizedString("Open", bundle: bundle, comment: "")
      }

      /// en translation: Order Date:
      ///
      /// Locales: en, ar, ur
      static func orderDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Date:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Date:"
        }

        return NSLocalizedString("Order Date:", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ar, ur
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Password mismatched, please enter the same password
      ///
      /// Locales: en, ar, ur
      static func passwordMismatchedPleaseEnterTheSamePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password mismatched, please enter the same password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password mismatched, please enter the same password"
        }

        return NSLocalizedString("Password mismatched, please enter the same password", bundle: bundle, comment: "")
      }

      /// en translation: Payment Confirmation
      ///
      /// Locales: en, ar, ur
      static func paymentConfirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment Confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment Confirmation"
        }

        return NSLocalizedString("Payment Confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Payment Received?
      ///
      /// Locales: en, ar, ur
      static func paymentReceived(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment Received?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment Received?"
        }

        return NSLocalizedString("Payment Received?", bundle: bundle, comment: "")
      }

      /// en translation: Pending(Awaiting Customer Approval)
      ///
      /// Locales: en, ar, ur
      static func pendingAwaitingCustomerApproval(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pending(Awaiting Customer Approval)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pending(Awaiting Customer Approval)"
        }

        return NSLocalizedString("Pending(Awaiting Customer Approval)", bundle: bundle, comment: "")
      }

      /// en translation: Person rate it
      ///
      /// Locales: en, ar, ur
      static func personRateIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Person rate it", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Person rate it"
        }

        return NSLocalizedString("Person rate it", bundle: bundle, comment: "")
      }

      /// en translation: Please add rate
      ///
      /// Locales: en, ar, ur
      static func pleaseAddRate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add rate"
        }

        return NSLocalizedString("Please add rate", bundle: bundle, comment: "")
      }

      /// en translation: Please confirm the password
      ///
      /// Locales: en, ar, ur
      static func pleaseConfirmThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please confirm the password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please confirm the password"
        }

        return NSLocalizedString("Please confirm the password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter Bank Name
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterBankName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter Bank Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter Bank Name"
        }

        return NSLocalizedString("Please enter Bank Name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid 16-digit card number.
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterAValid16DigitCardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid 16-digit card number.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid 16-digit card number."
        }

        return NSLocalizedString("Please enter a valid 16-digit card number.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid CVV.
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterAValidCVV(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid CVV.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid CVV."
        }

        return NSLocalizedString("Please enter a valid CVV.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid month.
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterAValidMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid month.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid month."
        }

        return NSLocalizedString("Please enter a valid month.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter account number
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterAccountNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter account number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter account number"
        }

        return NSLocalizedString("Please enter account number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter amount
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter amount"
        }

        return NSLocalizedString("Please enter amount", bundle: bundle, comment: "")
      }

      /// en translation: Please enter expiry date in MM/YY format.
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterExpiryDateInMMYYFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter expiry date in MM/YY format.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter expiry date in MM/YY format."
        }

        return NSLocalizedString("Please enter expiry date in MM/YY format.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter lower or equal amount than your wallet balance
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterLowerOrEqualAmountThanYourWalletBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter lower or equal amount than your wallet balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter lower or equal amount than your wallet balance"
        }

        return NSLocalizedString("Please enter lower or equal amount than your wallet balance", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the IBAN Number
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheIBANNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the IBAN Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the IBAN Number"
        }

        return NSLocalizedString("Please enter the IBAN Number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the account holder name
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheAccountHolderName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the account holder name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the account holder name"
        }

        return NSLocalizedString("Please enter the account holder name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the bid amount
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheBidAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the bid amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the bid amount"
        }

        return NSLocalizedString("Please enter the bid amount", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the card holder's name.
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheCardHolderSName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the card holder's name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the card holder's name."
        }

        return NSLocalizedString("Please enter the card holder's name.", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the description
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the description"
        }

        return NSLocalizedString("Please enter the description", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the email address
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the email address"
        }

        return NSLocalizedString("Please enter the email address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the first name
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the first name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the first name"
        }

        return NSLocalizedString("Please enter the first name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the last name
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the last name"
        }

        return NSLocalizedString("Please enter the last name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the message
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the message"
        }

        return NSLocalizedString("Please enter the message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the mobile number
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheMobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the mobile number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the mobile number"
        }

        return NSLocalizedString("Please enter the mobile number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the new password
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the new password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the new password"
        }

        return NSLocalizedString("Please enter the new password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the password
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the password"
        }

        return NSLocalizedString("Please enter the password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the review
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheReview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the review"
        }

        return NSLocalizedString("Please enter the review", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the vehicle name
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterTheVehicleName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the vehicle name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the vehicle name"
        }

        return NSLocalizedString("Please enter the vehicle name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your driving experience
      ///
      /// Locales: en, ar, ur
      static func pleaseEnterYourDrivingExperience(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your driving experience", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your driving experience"
        }

        return NSLocalizedString("Please enter your driving experience", bundle: bundle, comment: "")
      }

      /// en translation: Please read the Terms and Conditions for proceed
      ///
      /// Locales: en, ar, ur
      static func pleaseReadTheTermsAndConditionsForProceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please read the Terms and Conditions for proceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please read the Terms and Conditions for proceed"
        }

        return NSLocalizedString("Please read the Terms and Conditions for proceed", bundle: bundle, comment: "")
      }

      /// en translation: Please select the delivery type
      ///
      /// Locales: en, ar, ur
      static func pleaseSelectTheDeliveryType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the delivery type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the delivery type"
        }

        return NSLocalizedString("Please select the delivery type", bundle: bundle, comment: "")
      }

      /// en translation: Please select the service
      ///
      /// Locales: en, ar, ur
      static func pleaseSelectTheService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the service"
        }

        return NSLocalizedString("Please select the service", bundle: bundle, comment: "")
      }

      /// en translation: Please select the sub service
      ///
      /// Locales: en, ar, ur
      static func pleaseSelectTheSubService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the sub service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the sub service"
        }

        return NSLocalizedString("Please select the sub service", bundle: bundle, comment: "")
      }

      /// en translation: Please select the vehicle type
      ///
      /// Locales: en, ar, ur
      static func pleaseSelectTheVehicleType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the vehicle type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the vehicle type"
        }

        return NSLocalizedString("Please select the vehicle type", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en, ar, ur
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price"
        }

        return NSLocalizedString("Price", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, ar, ur
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Proceed
      ///
      /// Locales: en, ar, ur
      static func proceed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Proceed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Proceed"
        }

        return NSLocalizedString("Proceed", bundle: bundle, comment: "")
      }

      /// en translation: Profile Updated Successfully
      ///
      /// Locales: en, ar, ur
      static func profileUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile Updated Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile Updated Successfully"
        }

        return NSLocalizedString("Profile Updated Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Provide review rating
      ///
      /// Locales: en, ar, ur
      static func provideReviewRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Provide review rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Provide review rating"
        }

        return NSLocalizedString("Provide review rating", bundle: bundle, comment: "")
      }

      /// en translation: Quantity
      ///
      /// Locales: en, ar, ur
      static func quantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Quantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Quantity"
        }

        return NSLocalizedString("Quantity", bundle: bundle, comment: "")
      }

      /// en translation: Query
      ///
      /// Locales: en, ar, ur
      static func query(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Query", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Query"
        }

        return NSLocalizedString("Query", bundle: bundle, comment: "")
      }

      /// en translation: Rear View
      ///
      /// Locales: en, ar, ur
      static func rearView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rear View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rear View"
        }

        return NSLocalizedString("Rear View", bundle: bundle, comment: "")
      }

      /// en translation: Receiving offers
      ///
      /// Locales: en, ar, ur
      static func receivingOffers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Receiving offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Receiving offers"
        }

        return NSLocalizedString("Receiving offers", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, ar, ur
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, ar, ur
      static func reject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reject"
        }

        return NSLocalizedString("Reject", bundle: bundle, comment: "")
      }

      /// en translation: Rejected Successfully
      ///
      /// Locales: en, ar, ur
      static func rejectedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rejected Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rejected Successfully"
        }

        return NSLocalizedString("Rejected Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Request For
      ///
      /// Locales: en, ar, ur
      static func requestFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request For", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request For"
        }

        return NSLocalizedString("Request For", bundle: bundle, comment: "")
      }

      /// en translation: Requests
      ///
      /// Locales: en, ar, ur
      static func requests(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Requests", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Requests"
        }

        return NSLocalizedString("Requests", bundle: bundle, comment: "")
      }

      /// en translation: Reset Password
      ///
      /// Locales: en, ar, ur
      static func resetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reset Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reset Password"
        }

        return NSLocalizedString("Reset Password", bundle: bundle, comment: "")
      }

      /// en translation: Robert Fox
      ///
      /// Locales: en, ar, ur
      static func robertFox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Robert Fox", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Robert Fox"
        }

        return NSLocalizedString("Robert Fox", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, ar, ur
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, ar, ur
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: en, ar, ur
      static func searchLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Location"
        }

        return NSLocalizedString("Search Location", bundle: bundle, comment: "")
      }

      /// en translation: Search for Location
      ///
      /// Locales: en, ar, ur
      static func searchForLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search for Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search for Location"
        }

        return NSLocalizedString("Search for Location", bundle: bundle, comment: "")
      }

      /// en translation: See Map
      ///
      /// Locales: en, ar, ur
      static func seeMap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See Map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See Map"
        }

        return NSLocalizedString("See Map", bundle: bundle, comment: "")
      }

      /// en translation: Select Delivery Type
      ///
      /// Locales: en, ar, ur
      static func selectDeliveryType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Delivery Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Delivery Type"
        }

        return NSLocalizedString("Select Delivery Type", bundle: bundle, comment: "")
      }

      /// en translation: Select Language
      ///
      /// Locales: en, ar, ur
      static func selectLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Language"
        }

        return NSLocalizedString("Select Language", bundle: bundle, comment: "")
      }

      /// en translation: Select Payment Method
      ///
      /// Locales: en, ar, ur
      static func selectPaymentMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Payment Method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Payment Method"
        }

        return NSLocalizedString("Select Payment Method", bundle: bundle, comment: "")
      }

      /// en translation: Select Service
      ///
      /// Locales: en, ar, ur
      static func selectService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Service"
        }

        return NSLocalizedString("Select Service", bundle: bundle, comment: "")
      }

      /// en translation: Select Service Type
      ///
      /// Locales: en, ar, ur
      static func selectServiceType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Service Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Service Type"
        }

        return NSLocalizedString("Select Service Type", bundle: bundle, comment: "")
      }

      /// en translation: Select Vehicle Type
      ///
      /// Locales: en, ar, ur
      static func selectVehicleType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Vehicle Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Vehicle Type"
        }

        return NSLocalizedString("Select Vehicle Type", bundle: bundle, comment: "")
      }

      /// en translation: Select account type
      ///
      /// Locales: en, ar, ur
      static func selectAccountType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select account type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select account type"
        }

        return NSLocalizedString("Select account type", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, ar, ur
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Send Offer
      ///
      /// Locales: en, ar, ur
      static func sendOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send Offer"
        }

        return NSLocalizedString("Send Offer", bundle: bundle, comment: "")
      }

      /// en translation: Send Request
      ///
      /// Locales: en, ar, ur
      static func sendRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send Request"
        }

        return NSLocalizedString("Send Request", bundle: bundle, comment: "")
      }

      /// en translation: Send To Requester
      ///
      /// Locales: en, ar, ur
      static func sendToRequester(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send To Requester", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send To Requester"
        }

        return NSLocalizedString("Send To Requester", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ar, ur
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share App
      ///
      /// Locales: en, ar, ur
      static func shareApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share App", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share App"
        }

        return NSLocalizedString("Share App", bundle: bundle, comment: "")
      }

      /// en translation: Side View
      ///
      /// Locales: en, ar, ur
      static func sideView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Side View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Side View"
        }

        return NSLocalizedString("Side View", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, ar, ur
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, ar, ur
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign Up"
        }

        return NSLocalizedString("Sign Up", bundle: bundle, comment: "")
      }

      /// en translation: Signup Now
      ///
      /// Locales: en, ar, ur
      static func signupNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Signup Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Signup Now"
        }

        return NSLocalizedString("Signup Now", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, ar, ur
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Skip"
        }

        return NSLocalizedString("Skip", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, ar, ur
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start"
        }

        return NSLocalizedString("Start", bundle: bundle, comment: "")
      }

      /// en translation: Start Order
      ///
      /// Locales: en, ar, ur
      static func startOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start Order"
        }

        return NSLocalizedString("Start Order", bundle: bundle, comment: "")
      }

      /// en translation: Start earning with reliable and steady work.
      ///
      /// Locales: en, ar, ur
      static func startEarningWithReliableAndSteadyWork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start earning with reliable and steady work.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start earning with reliable and steady work."
        }

        return NSLocalizedString("Start earning with reliable and steady work.", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, ar, ur
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: Sure you received the full payment of this job from client?
      ///
      /// Locales: en, ar, ur
      static func sureYouReceivedTheFullPaymentOfThisJobFromClient(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sure you received the full payment of this job from client?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sure you received the full payment of this job from client?"
        }

        return NSLocalizedString("Sure you received the full payment of this job from client?", bundle: bundle, comment: "")
      }

      /// en translation: Term of services
      ///
      /// Locales: en, ar, ur
      static func termOfServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Term of services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Term of services"
        }

        return NSLocalizedString("Term of services", bundle: bundle, comment: "")
      }

      /// en translation: Thanks You for Request!
      ///
      /// Locales: en, ar, ur
      static func thanksYouForRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thanks You for Request!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thanks You for Request!"
        }

        return NSLocalizedString("Thanks You for Request!", bundle: bundle, comment: "")
      }

      /// en translation: The card has expired.
      ///
      /// Locales: en, ar, ur
      static func theCardHasExpired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The card has expired.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The card has expired."
        }

        return NSLocalizedString("The card has expired.", bundle: bundle, comment: "")
      }

      /// en translation: This request status is delivered. So you can not chat
      ///
      /// Locales: en, ar, ur
      static func thisRequestStatusIsDeliveredSoYouCanNotChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This request status is delivered. So you can not chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This request status is delivered. So you can not chat"
        }

        return NSLocalizedString("This request status is delivered. So you can not chat", bundle: bundle, comment: "")
      }

      /// en translation: Top Up
      ///
      /// Locales: en, ar, ur
      static func topUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Top Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Top Up"
        }

        return NSLocalizedString("Top Up", bundle: bundle, comment: "")
      }

      /// en translation: Topup successfully done
      ///
      /// Locales: en, ar, ur
      static func topupSuccessfullyDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Topup successfully done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Topup successfully done"
        }

        return NSLocalizedString("Topup successfully done", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: en, ar, ur
      static func totalAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Amount"
        }

        return NSLocalizedString("Total Amount", bundle: bundle, comment: "")
      }

      /// en translation: Total Earning
      ///
      /// Locales: en, ar, ur
      static func totalEarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Earning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Earning"
        }

        return NSLocalizedString("Total Earning", bundle: bundle, comment: "")
      }

      /// en translation: Transaction History
      ///
      /// Locales: en, ar, ur
      static func transactionHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Transaction History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Transaction History"
        }

        return NSLocalizedString("Transaction History", bundle: bundle, comment: "")
      }

      /// en translation: Type Something
      ///
      /// Locales: en, ur
      static func typeSomething(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Something...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Something..."
        }

        return NSLocalizedString("Type Something...", bundle: bundle, comment: "")
      }

      /// en translation: Un-Available
      ///
      /// Locales: en, ar, ur
      static func unAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Un-Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Un-Available"
        }

        return NSLocalizedString("Un-Available", bundle: bundle, comment: "")
      }

      /// en translation: Update Offer
      ///
      /// Locales: en, ar, ur
      static func updateOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Offer"
        }

        return NSLocalizedString("Update Offer", bundle: bundle, comment: "")
      }

      /// en translation: Urdu
      ///
      /// Locales: en, ar, ur
      static func urdu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Urdu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Urdu"
        }

        return NSLocalizedString("Urdu", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle Images
      ///
      /// Locales: en, ar, ur
      static func vehicleImages(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vehicle Images", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vehicle Images"
        }

        return NSLocalizedString("Vehicle Images", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle Name
      ///
      /// Locales: en, ar, ur
      static func vehicleName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vehicle Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vehicle Name"
        }

        return NSLocalizedString("Vehicle Name", bundle: bundle, comment: "")
      }

      /// en translation: Vehicle Type
      ///
      /// Locales: en, ar, ur
      static func vehicleType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vehicle Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vehicle Type"
        }

        return NSLocalizedString("Vehicle Type", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, ar, ur
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet"
        }

        return NSLocalizedString("Wallet", bundle: bundle, comment: "")
      }

      /// en translation: We will contact you soon
      ///
      /// Locales: en, ar, ur
      static func weWillContactYouSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We will contact you soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We will contact you soon"
        }

        return NSLocalizedString("We will contact you soon", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, ar, ur
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome"
        }

        return NSLocalizedString("Welcome", bundle: bundle, comment: "")
      }

      /// en translation: Welcome! Please enter your information below and get started.
      ///
      /// Locales: en, ar, ur
      static func welcomePleaseEnterYourInformationBelowAndGetStarted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome! Please enter your information below and get started.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome! Please enter your information below and get started."
        }

        return NSLocalizedString("Welcome! Please enter your information below and get started.", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw
      ///
      /// Locales: en, ar, ur
      static func withdraw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdraw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdraw"
        }

        return NSLocalizedString("Withdraw", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw History
      ///
      /// Locales: en, ar, ur
      static func withdrawHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdraw History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdraw History"
        }

        return NSLocalizedString("Withdraw History", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal
      ///
      /// Locales: en, ar, ur
      static func withdrawal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdrawal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdrawal"
        }

        return NSLocalizedString("Withdrawal", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal Request
      ///
      /// Locales: en, ar, ur
      static func withdrawalRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdrawal Request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdrawal Request"
        }

        return NSLocalizedString("Withdrawal Request", bundle: bundle, comment: "")
      }

      /// en translation: Write down your question and problem and we would be happy to help about it
      ///
      /// Locales: en, ar, ur
      static func writeDownYourQuestionAndProblemAndWeWouldBeHappyToHelpAboutIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write down your question and problem and we would be happy to help about it", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write down your question and problem and we would be happy to help about it"
        }

        return NSLocalizedString("Write down your question and problem and we would be happy to help about it", bundle: bundle, comment: "")
      }

      /// en translation: Write here
      ///
      /// Locales: en, ar, ur
      static func writeHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write here"
        }

        return NSLocalizedString("Write here", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en, ar, ur
      static func writeToUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write to us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write to us"
        }

        return NSLocalizedString("Write to us", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar, ur
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You can send this balance to any bank account at a nominal charge
      ///
      /// Locales: en, ar, ur
      static func youCanSendThisBalanceToAnyBankAccountAtANominalCharge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can send this balance to any bank account at a nominal charge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can send this balance to any bank account at a nominal charge"
        }

        return NSLocalizedString("You can send this balance to any bank account at a nominal charge", bundle: bundle, comment: "")
      }

      /// en translation: You have 0 notification
      ///
      /// Locales: en, ar, ur
      static func youHave0Notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have 0 notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have 0 notification"
        }

        return NSLocalizedString("You have 0 notification", bundle: bundle, comment: "")
      }

      /// en translation: You have no orders
      ///
      /// Locales: en, ar, ur
      static func youHaveNoOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have no orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have no orders"
        }

        return NSLocalizedString("You have no orders", bundle: bundle, comment: "")
      }

      /// en translation: Your Balance
      ///
      /// Locales: en, ar, ur
      static func yourBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Balance"
        }

        return NSLocalizedString("Your Balance", bundle: bundle, comment: "")
      }

      /// en translation: Your password has been successfully changed
      ///
      /// Locales: en, ar, ur
      static func yourPasswordHasBeenSuccessfullyChanged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your password has been successfully changed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your password has been successfully changed"
        }

        return NSLocalizedString("Your password has been successfully changed", bundle: bundle, comment: "")
      }

      /// en translation: Your request added successfully.
      ///
      /// Locales: en, ar, ur
      static func yourRequestAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your request added successfully.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your request added successfully."
        }

        return NSLocalizedString("Your request added successfully.", bundle: bundle, comment: "")
      }

      /// en translation: Your request is sent successfully
      ///
      /// Locales: en, ar, ur
      static func yourRequestIsSentSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your request is sent successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your request is sent successfully"
        }

        return NSLocalizedString("Your request is sent successfully", bundle: bundle, comment: "")
      }

      /// en translation: Your trusted partner for all your construction needs
      ///
      /// Locales: en, ar, ur
      static func yourTrustedPartnerForAllYourConstructionNeeds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your trusted partner for all your construction needs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your trusted partner for all your construction needs"
        }

        return NSLocalizedString("Your trusted partner for all your construction needs", bundle: bundle, comment: "")
      }

      /// en translation: Yuuupi
      ///
      /// Locales: en, ar, ur
      static func yuuupi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yuuupi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yuuupi"
        }

        return NSLocalizedString("Yuuupi", bundle: bundle, comment: "")
      }

      /// en translation: in your wallet
      ///
      /// Locales: en, ar, ur
      static func inYourWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("in your wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "in your wallet"
        }

        return NSLocalizedString("in your wallet", bundle: bundle, comment: "")
      }

      /// en translation: moh@gmail.com
      ///
      /// Locales: en, ar, ur
      static func mohGmailCom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moh@gmail.com", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "moh@gmail.com"
        }

        return NSLocalizedString("moh@gmail.com", bundle: bundle, comment: "")
      }

      /// en translation: mt mt
      ///
      /// Locales: en, ar, ur
      static func mtMt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mt mt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mt mt"
        }

        return NSLocalizedString("mt mt", bundle: bundle, comment: "")
      }

      /// en translation: ok
      ///
      /// Locales: en, ar, ur
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.newRequestCell` struct is generated, and contains static references to 12 localization keys.
    struct newRequestCell {
      /// en translation:  Willion Shades
      ///
      /// Locales: en, ar, ur
      static let h19YY8uQText = Rswift.StringResource(key: "H19-yY-8uQ.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: $20
      ///
      /// Locales: en, ar, ur
      static let zhk05rFText = Rswift.StringResource(key: "6ZH-K0-5rF.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, ar, ur
      static let sfSJUFnpText = Rswift.StringResource(key: "sfS-jU-Fnp.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: 2025-02-20 01:36:13
      ///
      /// Locales: en, ar, ur
      static let vdsX0LoKText = Rswift.StringResource(key: "Vds-x0-LoK.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: 3,690 Km
      ///
      /// Locales: en, ar, ur
      static let w0EO041WText = Rswift.StringResource(key: "w0E-o0-41W.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: 4.0
      ///
      /// Locales: en, ar, ur
      static let gadQ29EEText = Rswift.StringResource(key: "Gad-q2-9EE.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: 6
      ///
      /// Locales: en, ar, ur
      static let ccWtLJ2Text = Rswift.StringResource(key: "4Cc-Wt-lJ2.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, ar, ur
      static let j2EQiVbfNormalTitle = Rswift.StringResource(key: "J2E-qi-vbf.normalTitle", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, ar, ur
      static let qcyWNVqQNormalTitle = Rswift.StringResource(key: "Qcy-wN-VqQ.normalTitle", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Request for: Bricks (300 bricks)
      ///
      /// Locales: en, ar, ur
      static let kV6WkQTjText = Rswift.StringResource(key: "kV6-wk-qTj.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Request status: Soon Request
      ///
      /// Locales: en, ar, ur
      static let b2c8S8BXText = Rswift.StringResource(key: "b2c-8S-8BX.text", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)
      /// en translation: Send Offer
      ///
      /// Locales: en, ar, ur
      static let hBcDRWjTNormalTitle = Rswift.StringResource(key: "hBc-DR-wjT.normalTitle", tableName: "NewRequestCell", bundle: R.hostingBundle, locales: ["en", "ar", "ur"], comment: nil)

      /// en translation:  Willion Shades
      ///
      /// Locales: en, ar, ur
      static func h19YY8uQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H19-yY-8uQ.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "H19-yY-8uQ.text"
        }

        return NSLocalizedString("H19-yY-8uQ.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: $20
      ///
      /// Locales: en, ar, ur
      static func zhk05rFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6ZH-K0-5rF.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "6ZH-K0-5rF.text"
        }

        return NSLocalizedString("6ZH-K0-5rF.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, ar, ur
      static func sfSJUFnpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sfS-jU-Fnp.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "sfS-jU-Fnp.text"
        }

        return NSLocalizedString("sfS-jU-Fnp.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: 2025-02-20 01:36:13
      ///
      /// Locales: en, ar, ur
      static func vdsX0LoKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vds-x0-LoK.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "Vds-x0-LoK.text"
        }

        return NSLocalizedString("Vds-x0-LoK.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: 3,690 Km
      ///
      /// Locales: en, ar, ur
      static func w0EO041WText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w0E-o0-41W.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "w0E-o0-41W.text"
        }

        return NSLocalizedString("w0E-o0-41W.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: 4.0
      ///
      /// Locales: en, ar, ur
      static func gadQ29EEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gad-q2-9EE.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "Gad-q2-9EE.text"
        }

        return NSLocalizedString("Gad-q2-9EE.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: 6
      ///
      /// Locales: en, ar, ur
      static func ccWtLJ2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Cc-Wt-lJ2.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "4Cc-Wt-lJ2.text"
        }

        return NSLocalizedString("4Cc-Wt-lJ2.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, ar, ur
      static func j2EQiVbfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J2E-qi-vbf.normalTitle", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "J2E-qi-vbf.normalTitle"
        }

        return NSLocalizedString("J2E-qi-vbf.normalTitle", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, ar, ur
      static func qcyWNVqQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qcy-wN-VqQ.normalTitle", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "Qcy-wN-VqQ.normalTitle"
        }

        return NSLocalizedString("Qcy-wN-VqQ.normalTitle", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: Request for: Bricks (300 bricks)
      ///
      /// Locales: en, ar, ur
      static func kV6WkQTjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kV6-wk-qTj.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "kV6-wk-qTj.text"
        }

        return NSLocalizedString("kV6-wk-qTj.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: Request status: Soon Request
      ///
      /// Locales: en, ar, ur
      static func b2c8S8BXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b2c-8S-8BX.text", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "b2c-8S-8BX.text"
        }

        return NSLocalizedString("b2c-8S-8BX.text", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      /// en translation: Send Offer
      ///
      /// Locales: en, ar, ur
      static func hBcDRWjTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hBc-DR-wjT.normalTitle", tableName: "NewRequestCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NewRequestCell", preferredLanguages: preferredLanguages) else {
          return "hBc-DR-wjT.normalTitle"
        }

        return NSLocalizedString("hBc-DR-wjT.normalTitle", tableName: "NewRequestCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AdminContactCell.validate()
      try _CartCell.validate()
      try _LandingCell.validate()
      try _LastChatCell.validate()
      try _NewRequestCell.validate()
      try _RatingReviewCell.validate()
      try _RequestCell.validate()
      try _VehicleTypeCell.validate()
      try _WithdrawCell.validate()
    }

    struct _AdminContactCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AdminContactCell

      let bundle = R.hostingBundle
      let identifier = "AdminContactCell"
      let name = "AdminContactCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AdminContactCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdminContactCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat' is used in nib 'AdminContactCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'AdminContactCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in nib 'AdminContactCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CartCell

      let bundle = R.hostingBundle
      let identifier = "CartCell"
      let name = "CartCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "brick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'brick' is used in nib 'CartCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LandingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LandingCell

      let bundle = R.hostingBundle
      let identifier = "LandingCell"
      let name = "LandingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LandingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LandingCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "slide_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slide_2' is used in nib 'LandingCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in nib 'LandingCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LastChatCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LastChatCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LastChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LastChatCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in nib 'LastChatCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "DARK_GREY", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'DARK_GREY' is used in nib 'LastChatCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NewRequestCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewRequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewRequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "No_Image_Available", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'No_Image_Available' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'minus' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Dark Blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Dark Blue' is used in nib 'NewRequestCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationCell

      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      fileprivate init() {}
    }

    struct _PlaceOrderImgCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PlaceOrderImgCell

      let bundle = R.hostingBundle
      let identifier = "PlaceOrderImgCell"
      let name = "PlaceOrderImgCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlaceOrderImgCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaceOrderImgCell
      }

      fileprivate init() {}
    }

    struct _RatingReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RatingReviewCell

      let bundle = R.hostingBundle
      let identifier = "RatingReviewCell"
      let name = "RatingReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RatingReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RatingReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in nib 'RatingReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RequestCell

      let bundle = R.hostingBundle
      let identifier = "RequestCell"
      let name = "RequestCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chatnew12", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatnew12' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pin1' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pin2' is used in nib 'RequestCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userdemoimg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userdemoimg' is used in nib 'RequestCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _VehicleTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VehicleTypeCell

      let bundle = R.hostingBundle
      let identifier = "VehicleTypeCell"
      let name = "VehicleTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VehicleTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VehicleTypeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cat3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cat3' is used in nib 'VehicleTypeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check_new_selected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check_new_selected' is used in nib 'VehicleTypeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WithdrawCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WithdrawCell

      let bundle = R.hostingBundle
      let identifier = "WithdrawCell"
      let name = "WithdrawCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransWallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransWallet' is used in nib 'WithdrawCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
